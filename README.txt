Before running, please ensure the packages listed in requirements.txt are installed. All packages are available through pip.

Once run with "Python GitTopFive," the application will set up a server that listens on port 80 for http connections. It responds to GET requests using the path "/org/<org name>" where "org name" is the name of the organization you wish to query. In addition an OAuth token must be supplied in the "token" field. If you do not have such a token, one can be generated by signing in to Github.com and navigating to https://github.com/settings/tokens and selecting 'Personal access tokens' from the menu on the left. No permissions need to be granted to this token.

If the target organization has less than five repositories, only those will be listed. Repositories are ranked by their total number of pull requests, both open and closed, and ties give priority to the first repository returned by the query. The query will return JSON with three fields - "Organization" houses the name of the organization queried for easy reference, "Repositories" contains the ordered list of five repositories, and "Pulls" contains the ordered list of the number of pull requests made to each of those repositories.

Unit tests are implemented in TestGitTopFive.py using the unittest module. IMPORTANT: Because the server listener is a blocking call, you must input 'ctrl-c' to begin the test process. As far as I can tell, this is a known poor interaction between flask-restful and unittest. I could try rewriting the unit tests in pytest to see if that fixes things, but for basic tests this should do. I have made the testing application print "Tests started" to the console after it recieves the ctrl-c signal to inform the user that the testing process is happening. As for the unit tests themselves, we test for proper error handling of bad input, then run queries for a few organizations both large and small selected to span that range, and ensure the output is not invalid. We then run the last query again and ensure that output remains the same for repeated queries.

A note on rate limit: The GitHub API restricts queries to 5000 per hour. While I have taken steps to minimize the number of calls required, this limit could still be hit if one were to make many calls in a short period. In this case, the application will give an appropriate error message. This could also cause the unit tests to fail, as it is a state outside our own application.

This program was developed using Python 3.5.3 and run on Windows 10.
